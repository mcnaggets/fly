apply plugin: 'java'
apply plugin: 'idea'
apply from: 'javafx.plugin'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = '0.1'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
    generated {
        java {
            srcDirs = ['src/main/generated']
        }
    }
}

configurations {
    querydslapt
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.springframework:spring-test:$springVersion"

    compile ("org.springframework:spring-context:$springVersion") {
        exclude group: "commons-logging", module: "commons-logging"
    }
    compile "org.springframework:spring-orm:$springVersion"
    compile "org.springframework.data:spring-data-mongodb:$springDataMongoDBVersion"

    compile "com.intellij:annotations:12.0"

    compile "com.mysema.querydsl:querydsl-mongodb:$querydslVersion"
    querydslapt "com.mysema.querydsl:querydsl-apt:$querydslVersion"

    compile "ch.qos.logback:logback-classic:1.1.2"
    compile "org.slf4j:jcl-over-slf4j:1.7.7"
    compile "org.logback-extensions:logback-ext-spring:0.1.2"

    compile "javax.mail:mail:1.4.7"

    compile "org.jfxtras:jfxtras-controls:8.0-r1"

}

if (!JavaVersion.current().isJava8Compatible()) {
    throw new GradleException("Java 8 required, ${System.getProperty("java.version")} found")
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.QuerydslAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}

idea {
    module {
        sourceDirs += file('src/main/generated')
    }
}

javafx {
    mainClass = 'by.fly.ui.JavaFXApplication'
    systemProperties = ['prism.disableRegionCaching': 'true']
}